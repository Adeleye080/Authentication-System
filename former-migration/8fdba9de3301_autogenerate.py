"""autogenerate

Revision ID: 8fdba9de3301
Revises: 9ff302c8e093
Create Date: 2025-05-07 19:33:59.497954

"""

from typing import Sequence, Union

from alembic import op  # type: ignore
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = "8fdba9de3301"
down_revision: Union[str, None] = "9ff302c8e093"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "auth_audit_logs",
        "event",
        existing_type=mysql.VARCHAR(length=50),
        type_=sa.Enum(
            "LOGIN",
            "PASSWORD_CHANGE",
            "PASSWORD_RESET",
            "CREATE_ACCOUNT",
            "REQUEST_VERIFICATION",
            "UPDATE_ACCOUNT",
            "REQUEST_MAGIC_LINK",
            "MAIL_ERROR",
            name="auditlogeventenum",
        ),
        existing_nullable=False,
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "reason",
        existing_type=mysql.VARCHAR(length=256),
        nullable=True,
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklists",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklists",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.create_unique_constraint(None, "auth_country_blacklists", ["country_code"])
    op.alter_column(
        "auth_refresh_tokens",
        "user_id",
        existing_type=mysql.VARCHAR(length=36),
        type_=sa.String(length=36),
        existing_nullable=False,
    )
    op.alter_column(
        "auth_refresh_tokens",
        "token",
        existing_type=mysql.VARCHAR(length=400),
        nullable=False,
    )
    op.alter_column(
        "auth_refresh_tokens",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_refresh_tokens",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.drop_constraint(
        "auth_refresh_tokens_ibfk_1", "auth_refresh_tokens", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "auth_refresh_tokens", "auth_users", ["user_id"], ["id"]
    )
    op.alter_column(
        "auth_totp_devices",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_totp_devices",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )

    op.create_unique_constraint(None, "auth_totp_devices", ["user_id"])
    op.alter_column(
        "auth_user_attributes",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_user_attributes",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )

    op.drop_constraint(
        "auth_user_attributes_ibfk_1", "auth_user_attributes", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "auth_user_attributes", "auth_users", ["user_id"], ["id"]
    )
    op.alter_column(
        "auth_user_devices",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_user_devices",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )

    op.create_index(
        op.f("ix_auth_user_devices_user_id"),
        "auth_user_devices",
        ["user_id"],
        unique=False,
    )
    op.drop_constraint(
        "auth_user_devices_ibfk_1", "auth_user_devices", type_="foreignkey"
    )
    op.create_foreign_key(None, "auth_user_devices", "auth_users", ["user_id"], ["id"])
    op.alter_column(
        "auth_users",
        "login_source",
        existing_type=mysql.VARCHAR(length=50),
        type_=sa.Enum(
            "PASSWORD", "GOOGLE", "MAGICLINK", "FACEBOOK", "GITHUB", name="loginsource"
        ),
        existing_nullable=True,
    )
    op.alter_column(
        "auth_users",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_users",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=True,
        existing_server_default=sa.text("(now())"),
    )
    op.drop_index("recovery_email", table_name="auth_users")
    op.create_index(
        "ix_user_login_initiated", "auth_users", ["login_initiated"], unique=False
    )
    op.create_index(
        "ix_user_login_source", "auth_users", ["login_source"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("ix_user_login_source", table_name="auth_users")
    op.drop_index("ix_user_login_initiated", table_name="auth_users")
    op.create_index("recovery_email", "auth_users", ["recovery_email"], unique=True)
    op.alter_column(
        "auth_users",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_users",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_users",
        "login_source",
        existing_type=sa.Enum(
            "PASSWORD", "GOOGLE", "MAGICLINK", "FACEBOOK", "GITHUB", name="loginsource"
        ),
        type_=mysql.VARCHAR(length=50),
        existing_nullable=True,
    )
    op.drop_constraint(None, "auth_user_devices", type_="foreignkey")
    op.create_foreign_key(
        "auth_user_devices_ibfk_1",
        "auth_user_devices",
        "auth_users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_auth_user_devices_user_id"), table_name="auth_user_devices")

    op.alter_column(
        "auth_user_devices",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_user_devices",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.drop_constraint(None, "auth_user_attributes", type_="foreignkey")
    op.create_foreign_key(
        "auth_user_attributes_ibfk_1",
        "auth_user_attributes",
        "auth_users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )

    op.alter_column(
        "auth_user_attributes",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_user_attributes",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.drop_constraint(None, "auth_totp_devices", type_="unique")

    op.alter_column(
        "auth_totp_devices",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_totp_devices",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.drop_constraint(None, "auth_refresh_tokens", type_="foreignkey")
    op.create_foreign_key(
        "auth_refresh_tokens_ibfk_1",
        "auth_refresh_tokens",
        "auth_users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.alter_column(
        "auth_refresh_tokens",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_refresh_tokens",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_refresh_tokens",
        "token",
        existing_type=mysql.VARCHAR(length=400),
        nullable=True,
    )
    op.alter_column(
        "auth_refresh_tokens",
        "user_id",
        existing_type=sa.String(length=36),
        type_=mysql.VARCHAR(length=36),
        existing_nullable=False,
    )
    op.drop_constraint(None, "auth_country_blacklists", type_="unique")
    op.alter_column(
        "auth_country_blacklists",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklists",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "updated_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "created_at",
        existing_type=mysql.DATETIME(),
        nullable=False,
        existing_server_default=sa.text("(now())"),
    )
    op.alter_column(
        "auth_country_blacklist_history",
        "reason",
        existing_type=mysql.VARCHAR(length=256),
        nullable=False,
    )
    op.create_index("ix_auth_audit_logs_id", "auth_audit_logs", ["id"], unique=False)
    op.alter_column(
        "auth_audit_logs",
        "event",
        existing_type=sa.Enum(
            "LOGIN",
            "PASSWORD_CHANGE",
            "PASSWORD_RESET",
            "CREATE_ACCOUNT",
            "REQUEST_VERIFICATION",
            "UPDATE_ACCOUNT",
            "REQUEST_MAGIC_LINK",
            "MAIL_ERROR",
            name="auditlogeventenum",
        ),
        type_=mysql.VARCHAR(length=50),
        existing_nullable=False,
    )
    # ### end Alembic commands ###
